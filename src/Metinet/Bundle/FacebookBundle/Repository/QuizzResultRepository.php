<?php

namespace Metinet\Bundle\FacebookBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * QuizzResultRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuizzResultRepository extends EntityRepository
{
    
    /**
     * Fonction qui retourne le nombre de quizz en cours de jeu
     * @return INT Le nombre de quizz en cours de jeu
     */
    public function getNombreQuizzEnCours(){
	return $this->_em->createQuery("SELECT COUNT(quizzResult.id)
					FROM MetinetFacebookBundle:QuizzResult quizzResult
					WHERE quizzResult.dateEnd IS NULL")
		->getSingleScalarResult();
    }
    
    /**
     * Fonction qui regarde si l'user a déjà joué au quizz ou non 
     * @param QUIZZ $quizz Le quizz que l'on veut jouer
     * @param USER $user    L'user qui veut jouer au quizz
     * @return BOOL TRUE or FALSE
     */
    public function hasPlayedThisQuizz($quizz, $user){
	$paramArray = array("quizz" => $quizz,
			    "user"  => $user);
	$result = $this->_em->createQuery("SELECT COUNT(quizzResult.id)
					FROM MetinetFacebookBundle:QuizzResult quizzResult
					WHERE quizzResult.quizz = :quizz
					AND quizzResult.user = :user")
		->setParameters($paramArray)
		->getSingleScalarResult();
	if($result > 0){
	    return TRUE;
	}
	return FALSE;
    }
    
    /**
     * Fonction qui retourne le nombre de points gagnés sur ce quizz par cet user.
     * @param QUIZZ $quizz.
     * @param USER $user.
     * @return INT Le nombre de points gagnés sur ce quizz par cet user.
     */
    public function getWinPoints($quizz, $user){
	$paramArray = array(	"quizz"	=> $quizz,
				"user"	=> $user);
	return $this->_em->createQuery("SELECT quizzResult.winPoints
					FROM MetinetFacebookBundle:QuizzResult quizzResult
					WHERE quizzResult.quizz = :quizz
					AND quizzResult.user = :user")
		->setParameters($paramArray)
		->getSingleScalarResult();
    }
    
    /**
     * Fonction qui retourne l'objet QuizzResult pour l'objet quizz et l'objet user donné.
     * @param Quizz $quizz  L'objet quizz dont on cherche le QuizzResult avec L'user donné.
     * @param User $user    L'objet user dont on cherche le QuizzResult avec le quizz donné.
     * @return QuizzResult  L'objet QuizzResult que l'on cherche, NULL si l'objet n'a pas été trouvé.
     */
    public function getQuizzResultFromQuizzAndUser($quizz, $user){
	$quizzResultResult = $this->findBy(array("quizz" => $quizz, "user" => $user));
	if(isset($quizzResultResult[0])){
	    return $quizzResultResult[0];
	}
	return NULL;
    }
    
    
    /**
     * Fonction qui retourne les n meilleurs joueurs pour le quizz choisi (requete par rapport au score obtenu sur ce quizz).
     * @param QUIZZ $quizz Le quizz dont on souhaite avoir les meilleurs joueurs.
     * @param INT $nbUsers Le nombre d'objets User à retourner.
     * @return ARRAY Un tableau d'objets User.
     */
    public function getBestQuizzUsers($quizz, $nbUsers){
	$paramArray = array("quizz" => $quizz);
	$result = $this->_em->createQuery(  "SELECT quizzResult
					    FROM MetinetFacebookBundle:QuizzResult quizzResult
					    WHERE quizzResult.quizz = :quizz
					    ORDER BY quizzResult.winPoints DESC")
		->setParameters($paramArray)
		->setMaxResults($nbUsers)
		->getResult();
	$arrayFinal = array();
	foreach($result as $row){
	    $arrayFinal[] = $row->getUser();
	}
	return $arrayFinal;
    }
    
}
