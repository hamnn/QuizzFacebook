<?php

namespace Metinet\Bundle\FacebookBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    /**
     * Fonction qui retourne un array de joueurs qui ont été créés dans les derniers $nbJours jours.
     * @param INT $nbJours le nombre de jours où l'on compte les joueurs créés entre aujourd'hui et ce nombre de jours
     * @return ARRAY un array d'objets user
     */
    public function getJoueursSurNDerniersJours($nbJours){
	if(isset($nbJours) && $nbJours > 0){
	    $paramArray = array();
	    $paramArray["nbJours"] = $nbJours;
	    return $this->_em->createQuery("SELECT user
					    FROM MetinetFacebookBundle:User user
					    WHERE DATEDIFF(day, user.created_at, NOW()) <= :nbJours")
		    ->setParameters($paramArray);
	}
    }
    
    
    /**
     * Fonction qui retourne le score moyen de tous les joueurs
     * @return DOUBLE Le score moyen de tous les joueurs
     */
    public function getScoreMoyenDeTousLesJoueurs(){
	return $this->_em->createQuery("SELECT AVG(user.points)
					FROM MetinetFacebookBundle:User user")
		->getSingleScalarResult();
    }
    
    /**
     * Fonction qui retourne le nombre total de joueurs enregistrés dans la base
     * @return INT Le nombre de total de joueurs enregistrés dans la base
     */
    public function getNombreTotalJoueurs(){
	return $this->_em->createQuery("SELECT COUNT(user.id)
					FROM MetinetFacebookBundle:User user")
		->getSingleScalarResult();
    }
    
    
    /**
     * Fonction qui retourne les n derniers utilisateurs enregistrés.
     * @param INT $nbUtilisateurs Le nombre d'utilisateurs à retourner.
     * @return ARRAY Tableau d'objets User.
     */
    public function getDerniersUtilisateurs($nbUtilisateurs){
	$result = $this->_em->createQuery(  "SELECT user
					    FROM MetinetFacebookBundle:User user
					    ORDER BY user.createdAt DESC")
		->setMaxResults($nbUtilisateurs)
		->getResult();
	$arrayFinal = array();
	foreach($result as $row){
	    $arrayFinal[] = $row;
	}
	return $arrayFinal;
    }
    
    /**
     * Fonction qui retourne un objet User correspondant à l'user dont on reçoit l'id Facebook en paramètres.
     * @param INT $fbId L'id Facebook de l'user que l'on cherche.
     * @return USER si l'user a été trouvé, NULL sinon.
     */
    public function getUserFromFbId($fbId){
	$userResult = $this->findBy(array("fbUid" => $fbId));
	if(isset($userResult[0])){
	    return $userResult[0];
	}
	return NULL;
    }
    
    
    public function getClassementUserAvecAmis($user){
        $arrayMieuxClasse = array();
        $arrayMoinsClasse = array();
        $arrayFinal = array();
        $paramArray = array(    "points"  => $user->getPoints(),
                                "user"      => $user);
        // requete pour savoir la place de l'user
        $placeUser = $this->getUserRank($user);
        $user->setGeneralRank($placeUser);
        // requete pour récupérer les 5 users immédiatement mieux classés que moi
	$result = $this->_em->createQuery(  "SELECT user
					    FROM MetinetFacebookBundle:User user
					    WHERE user.points >= :points
                                            AND user != :user
					    ORDER BY user.points ASC,
                                            user.averageTime ASC")
		->setParameters($paramArray)
		->setMaxResults(5)
		->getResult();
        $i = 0;
	foreach($result as $row){
	    if(isset($row)){
                $i++;
                $row->setGeneralRank($user->getGeneralRank() - $i);
		$arrayMieuxClasse[] = $row;
	    }
	}
        // on trie l'array des mieux classés
        $arrayMieuxClasse = array_reverse($arrayMieuxClasse);
        
        // on s'ajoute à l'array des moins classés
        $arrayMoinsClasse[] = $user;
        // requete pour récupérer les 5 users immédiatement moins bien classés que moi
	$result = $this->_em->createQuery(  "SELECT user
					    FROM MetinetFacebookBundle:User user
					    WHERE user.points <= :points
                                            AND user != :user
					    ORDER BY user.points DESC,
                                            user.averageTime ASC")
		->setParameters($paramArray)
		->setMaxResults(5)
		->getResult();
        $i = 0;
	foreach($result as $row){
	    if(isset($row)){
                $i++;
                $row->setGeneralRank($user->getGeneralRank() + $i);
		$arrayMoinsClasse[] = $row;
	    }
	}
        
        // on ajoute les users classés à l'array final
        $arrayFinal = array_merge($arrayMieuxClasse, $arrayMoinsClasse);
        
	return $arrayFinal;
    }
    
    
    /**
     * Fonction qui retourne le rang de l'user dans le classement général.
     * @param USER $user    L'user dont on souhaite savoir le rang
     * @return INT Le rang de l'user
     */
    public function getUserRank($user){
        $paramArray = array(    "points"  => $user->getPoints(),
                                "user"      => $user);
        // requete pour savoir la place de l'user
        return $this->_em->createQuery(  "SELECT COUNT(user.id)
					    FROM MetinetFacebookBundle:User user
					    WHERE user.points >= :points
                                            AND user != :user
					    ORDER BY user.points DESC,
                                            user.averageTime ASC")
		->setParameters($paramArray)
		->getSingleScalarResult() + 1;
    }
    
    
    
    public function getTop10(){
        
        // requete pour savoir la place de l'user
        $top10 = $this->_em->createQuery(  "SELECT user
					    FROM MetinetFacebookBundle:User user
					    ORDER BY user.points DESC,
                                            user.averageTime ASC")
                ->setMaxResults(10)
		->getResult();
        
        return $top10;       
    }
    
    public function getQueryAllFriends($friendsId){
    return $this->_em->createQuery("SELECT user 
                                    FROM MetinetFacebookBundle:User user
                                    WHERE user.fbUid IN (:friendsId)
                                    ORDER BY user.points DESC,
                                    user.averageTime ASC")
              ->setParameter("friendsId", $friendsId);
    }
}
