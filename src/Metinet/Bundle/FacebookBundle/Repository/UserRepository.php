<?php

namespace Metinet\Bundle\FacebookBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    /**
     * Fonction qui retourne un array de joueurs qui ont été créés dans les derniers $nbJours jours.
     * @param INT $nbJours le nombre de jours où l'on compte les joueurs créés entre aujourd'hui et ce nombre de jours
     * @return ARRAY un array d'objets user
     */
    public function getJoueursSurNDerniersJours($nbJours){
	if(isset($nbJours) && $nbJours > 0){
	    $paramArray = array();
	    $paramArray["nbJours"] = $nbJours;
	    return $this->_em->createQuery("SELECT user
					    FROM MetinetFacebookBundle:User user
					    WHERE DATEDIFF(day, user.created_at, NOW()) <= :nbJours")
		    ->setParameters($paramArray);
	}
    }
    
    
    /**
     * Fonction qui retourne le score moyen de tous les joueurs
     * @return DOUBLE Le score moyen de tous les joueurs
     */
    public function getScoreMoyenDeTousLesJoueurs(){
	return $this->_em->createQuery("SELECT AVG(user.points)
					FROM MetinetFacebookBundle:User user")
		->getSingleScalarResult();
    }
    
    /**
     * Fonction qui retourne le nombre total de joueurs enregistrés dans la base
     * @return INT Le nombre de total de joueurs enregistrés dans la base
     */
    public function getNombreTotalJoueurs(){
	return $this->_em->createQuery("SELECT COUNT(user.id)
					FROM MetinetFacebookBundle:User user")
		->getSingleScalarResult();
    }
    
    
    /**
     * Fonction qui retourne les n derniers utilisateurs enregistrés.
     * @param INT $nbUtilisateurs Le nombre d'utilisateurs à retourner.
     * @return ARRAY Tableau d'objets User.
     */
    public function getDerniersUtilisateurs($nbUtilisateurs){
	$result = $this->_em->createQuery(  "SELECT user
					    FROM MetinetFacebookBundle:User user
					    ORDER BY user.createdAt DESC")
		->setMaxResults($nbUtilisateurs)
		->getResult();
	$arrayFinal = array();
	foreach($result as $row){
	    $arrayFinal[] = $row;
	}
	return $arrayFinal;
    }
    
    /**
     * Fonction qui retourne un objet User correspondant à l'user dont on reçoit l'id Facebook en paramètres.
     * @param INT $fbId L'id Facebook de l'user que l'on cherche.
     * @return USER si l'user a été trouvé, NULL sinon.
     */
    public function getUserFromFbId($fbId){
	$userResult = $this->findBy(array("fbUid" => $fbId));
	if(isset($userResult[0])){
	    return $userResult[0];
	}
	return NULL;
    }
}
